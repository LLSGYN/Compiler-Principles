< keyword, extern >
< keyword, int >
< identifier, debugLevel >
< operator, ; >
< keyword, struct >
< identifier, CacheNode >
< operator, { >
< keyword, char >
< identifier, key >
< operator, [ >
< integer, 50 >
< operator, ] >
< operator, ; >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, value >
< operator, ; >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, next >
< operator, ; >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, prev >
< operator, ; >
< operator, } >
< operator, ; >
< keyword, struct >
< identifier, Hash >
< operator, { >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, node >
< operator, ; >
< keyword, struct >
< identifier, Hash >
< operator, * >
< identifier, next >
< operator, ; >
< operator, } >
< operator, ; >
< keyword, void >
< identifier, freeValue >
< operator, ( >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, value >
< operator, ) >
< operator, { >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, curPtr >
< operator, = >
< identifier, value >
< operator, ; >
< keyword, while >
< operator, ( >
< identifier, curPtr >
< operator, ) >
< operator, { >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, temp >
< operator, = >
< identifier, curPtr >
< operator, -> >
< identifier, nextval >
< operator, ; >
< identifier, free >
< operator, ( >
< identifier, curPtr >
< operator, ) >
< operator, ; >
< identifier, curPtr >
< operator, = >
< identifier, temp >
< operator, ; >
< operator, } >
< operator, } >
< keyword, void >
< identifier, copyValue >
< operator, ( >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, des >
< operator, , >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, src >
< operator, ) >
< operator, { >
< keyword, if >
< operator, ( >
< identifier, des >
< operator, == >
< identifier, src >
< operator, ) >
< keyword, return >
< operator, ; >
< keyword, else >
< operator, { >
< keyword, if >
< operator, ( >
< identifier, des >
< operator, -> >
< identifier, nextval >
< operator, ) >
< identifier, free >
< operator, ( >
< identifier, des >
< operator, -> >
< identifier, nextval >
< operator, ) >
< operator, ; >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, lhs >
< operator, = >
< identifier, des >
< operator, , >
< operator, * >
< identifier, rhs >
< operator, = >
< identifier, src >
< operator, ; >
< keyword, while >
< operator, ( >
< identifier, rhs >
< operator, -> >
< identifier, nextval >
< operator, ) >
< operator, { >
< identifier, rhs >
< operator, = >
< identifier, rhs >
< operator, -> >
< identifier, nextval >
< operator, ; >
< identifier, lhs >
< operator, -> >
< identifier, nextval >
< operator, = >
< operator, ( >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< operator, ) >
< identifier, malloc >
< operator, ( >
< keyword, sizeof >
< operator, ( >
< keyword, struct >
< identifier, ipValue >
< operator, ) >
< operator, ) >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, lhs >
< operator, ) >
< operator, { >
< identifier, lhs >
< operator, = >
< identifier, lhs >
< operator, -> >
< identifier, nextval >
< operator, ; >
< identifier, strcpy >
< operator, ( >
< identifier, lhs >
< operator, -> >
< identifier, value >
< operator, , >
< identifier, rhs >
< operator, -> >
< identifier, value >
< operator, ) >
< operator, ; >
< identifier, lhs >
< operator, -> >
< identifier, nextval >
< operator, = >
< identifier, NULL >
< operator, ; >
< operator, } >
< keyword, else >
< identifier, printf >
< operator, ( >
< string literal, Fail to allocate memory!
 >
< operator, ) >
< operator, ; >
< operator, } >
< operator, } >
< operator, } >
< keyword, void >
< identifier, printValue >
< operator, ( >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, ipval >
< operator, ) >
< operator, { >
< keyword, while >
< operator, ( >
< identifier, ipval >
< operator, -> >
< identifier, nextval >
< operator, ) >
< operator, { >
< identifier, ipval >
< operator, = >
< identifier, ipval >
< operator, -> >
< identifier, nextval >
< operator, ; >
< identifier, printf >
< operator, ( >
< string literal, 	%s
 >
< operator, , >
< identifier, ipval >
< operator, -> >
< identifier, value >
< operator, ) >
< operator, ; >
< operator, } >
< operator, } >
< keyword, unsigned >
< identifier, hash >
< operator, ( >
< identifier, Cache >
< operator, * >
< identifier, cache >
< operator, , >
< keyword, const >
< keyword, char >
< operator, * >
< identifier, str >
< operator, ) >
< operator, { >
< keyword, unsigned >
< identifier, hash_value >
< operator, = >
< integer, 0 >
< operator, , >
< identifier, len >
< operator, = >
< identifier, strlen >
< operator, ( >
< identifier, str >
< operator, ) >
< operator, ; >
< keyword, for >
< operator, ( >
< keyword, int >
< identifier, i >
< operator, = >
< integer, 0 >
< operator, ; >
< identifier, i >
< operator, < >
< identifier, len >
< operator, ; >
< operator, ++ >
< identifier, i >
< operator, ) >
< operator, { >
< identifier, hash_value >
< operator, += >
< identifier, str >
< operator, [ >
< identifier, i >
< operator, ] >
< operator, ; >
< identifier, hash_value >
< operator, += >
< operator, ( >
< identifier, hash_value >
< operator, << >
< integer, 10 >
< operator, ) >
< operator, ; >
< identifier, hash_value >
< operator, ^= >
< operator, ( >
< identifier, hash_value >
< operator, >> >
< integer, 5 >
< operator, ) >
< operator, ; >
< operator, } >
< identifier, hash_value >
< operator, += >
< operator, ( >
< identifier, hash_value >
< operator, << >
< integer, 3 >
< operator, ) >
< operator, ; >
< identifier, hash_value >
< operator, ^= >
< operator, ( >
< identifier, hash_value >
< operator, >> >
< integer, 11 >
< operator, ) >
< operator, ; >
< identifier, hash_value >
< operator, += >
< operator, ( >
< identifier, hash_value >
< operator, << >
< integer, 15 >
< operator, ) >
< operator, ; >
< keyword, return >
< identifier, hash_value >
< operator, % >
< identifier, cache >
< operator, -> >
< identifier, capacity >
< operator, ; >
< operator, } >
< identifier, Cache >
< operator, * >
< identifier, CacheInit >
< operator, ( >
< keyword, int >
< identifier, capacity >
< operator, ) >
< operator, { >
< identifier, Cache >
< operator, * >
< identifier, cache >
< operator, = >
< operator, ( >
< identifier, Cache >
< operator, * >
< operator, ) >
< identifier, malloc >
< operator, ( >
< keyword, sizeof >
< operator, ( >
< identifier, Cache >
< operator, ) >
< operator, ) >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, cache >
< operator, == >
< identifier, NULL >
< operator, ) >
< operator, { >
< identifier, printf >
< operator, ( >
< string literal, Cannot allocate memory!
 >
< operator, ) >
< operator, ; >
< keyword, return >
< identifier, NULL >
< operator, ; >
< operator, } >
< keyword, else >
< operator, { >
< identifier, cache >
< operator, -> >
< identifier, cached >
< operator, = >
< integer, 0 >
< operator, ; >
< identifier, cache >
< operator, -> >
< identifier, capacity >
< operator, = >
< identifier, capacity >
< operator, ; >
< identifier, cache >
< operator, -> >
< identifier, table >
< operator, = >
< operator, ( >
< keyword, struct >
< identifier, Hash >
< operator, * >
< operator, ) >
< identifier, malloc >
< operator, ( >
< keyword, sizeof >
< operator, ( >
< keyword, struct >
< identifier, Hash >
< operator, ) >
< operator, * >
< identifier, capacity >
< operator, ) >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, cache >
< operator, -> >
< identifier, table >
< operator, == >
< identifier, NULL >
< operator, ) >
< operator, { >
< identifier, printf >
< operator, ( >
< string literal, Cannot allocate memory!
 >
< operator, ) >
< operator, ; >
< keyword, return >
< identifier, NULL >
< operator, ; >
< operator, } >
< keyword, for >
< operator, ( >
< keyword, int >
< identifier, i >
< operator, = >
< integer, 0 >
< operator, ; >
< identifier, i >
< operator, < >
< identifier, capacity >
< operator, ; >
< operator, ++ >
< identifier, i >
< operator, ) >
< operator, { >
< operator, ( >
< identifier, cache >
< operator, -> >
< identifier, table >
< operator, ) >
< operator, [ >
< identifier, i >
< operator, ] >
< operator, . >
< identifier, node >
< operator, = >
< identifier, NULL >
< operator, ; >
< operator, ( >
< identifier, cache >
< operator, -> >
< identifier, table >
< operator, ) >
< operator, [ >
< identifier, i >
< operator, ] >
< operator, . >
< identifier, next >
< operator, = >
< identifier, NULL >
< operator, ; >
< operator, } >
< identifier, cache >
< operator, -> >
< identifier, head >
< operator, = >
< operator, ( >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< operator, ) >
< identifier, malloc >
< operator, ( >
< keyword, sizeof >
< operator, ( >
< keyword, struct >
< identifier, CacheNode >
< operator, ) >
< operator, ) >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, cache >
< operator, -> >
< identifier, head >
< operator, != >
< identifier, NULL >
< operator, ) >
< operator, { >
< identifier, cache >
< operator, -> >
< identifier, head >
< operator, -> >
< identifier, next >
< operator, = >
< identifier, NULL >
< operator, ; >
< identifier, cache >
< operator, -> >
< identifier, tail >
< operator, = >
< identifier, cache >
< operator, -> >
< identifier, head >
< operator, ; >
< operator, } >
< keyword, else >
< operator, { >
< identifier, printf >
< operator, ( >
< string literal, Cannot allocate memory!
 >
< operator, ) >
< operator, ; >
< operator, } >
< operator, } >
< keyword, return >
< identifier, cache >
< operator, ; >
< operator, } >
< keyword, void >
< identifier, DeleteNode >
< operator, ( >
< identifier, Cache >
< operator, * >
< identifier, cache >
< operator, , >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, node >
< operator, ) >
< operator, { >
< keyword, if >
< operator, ( >
< identifier, node >
< operator, ) >
< operator, { >
< keyword, if >
< operator, ( >
< identifier, debugLevel >
< operator, == >
< integer, 2 >
< operator, ) >
< identifier, printf >
< operator, ( >
< string literal, node to delete is: %s
 >
< operator, , >
< identifier, node >
< operator, -> >
< identifier, key >
< operator, ) >
< operator, ; >
< operator, } >
< keyword, else >
< keyword, return >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, node >
< operator, == >
< identifier, cache >
< operator, -> >
< identifier, tail >
< operator, ) >
< operator, { >
< identifier, cache >
< operator, -> >
< identifier, tail >
< operator, = >
< identifier, node >
< operator, -> >
< identifier, prev >
< operator, ; >
< identifier, node >
< operator, -> >
< identifier, prev >
< operator, -> >
< identifier, next >
< operator, = >
< identifier, NULL >
< operator, ; >
< identifier, cache >
< operator, -> >
< identifier, cached >
< operator, -- >
< operator, ; >
< identifier, freeValue >
< operator, ( >
< identifier, node >
< operator, -> >
< identifier, value >
< operator, ) >
< operator, ; >
< identifier, free >
< operator, ( >
< identifier, node >
< operator, ) >
< operator, ; >
< operator, } >
< keyword, else >
< operator, { >
< keyword, if >
< operator, ( >
< identifier, node >
< operator, -> >
< identifier, next >
< operator, == >
< identifier, NULL >
< operator, ) >
< operator, { >
< identifier, printf >
< operator, ( >
< string literal, invalid! next node is null!
 >
< operator, ) >
< operator, ; >
< keyword, return >
< operator, ; >
< operator, } >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, prePtr >
< operator, = >
< identifier, node >
< operator, -> >
< identifier, prev >
< operator, ; >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, nxtPtr >
< operator, = >
< identifier, node >
< operator, -> >
< identifier, next >
< operator, ; >
< identifier, prePtr >
< operator, -> >
< identifier, next >
< operator, = >
< identifier, nxtPtr >
< operator, ; >
< identifier, nxtPtr >
< operator, -> >
< identifier, prev >
< operator, = >
< identifier, prePtr >
< operator, ; >
< identifier, cache >
< operator, -> >
< identifier, cached >
< operator, -- >
< operator, ; >
< identifier, freeValue >
< operator, ( >
< identifier, node >
< operator, -> >
< identifier, value >
< operator, ) >
< operator, ; >
< identifier, free >
< operator, ( >
< identifier, node >
< operator, ) >
< operator, ; >
< operator, } >
< operator, } >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, CreateNode >
< operator, ( >
< identifier, Cache >
< operator, * >
< identifier, cache >
< operator, , >
< keyword, char >
< operator, * >
< identifier, domain >
< operator, , >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, ipval >
< operator, ) >
< operator, { >
< keyword, if >
< operator, ( >
< identifier, cache >
< operator, -> >
< identifier, cached >
< operator, == >
< identifier, cache >
< operator, -> >
< identifier, capacity >
< operator, ) >
< operator, { >
< keyword, unsigned >
< identifier, index >
< operator, = >
< identifier, hash >
< operator, ( >
< identifier, cache >
< operator, , >
< identifier, cache >
< operator, -> >
< identifier, tail >
< operator, -> >
< identifier, key >
< operator, ) >
< operator, ; >
< keyword, struct >
< identifier, Hash >
< operator, * >
< identifier, pre >
< operator, = >
< operator, & >
< operator, ( >
< identifier, cache >
< operator, -> >
< identifier, table >
< operator, ) >
< operator, [ >
< identifier, index >
< operator, ] >
< operator, ; >
< keyword, struct >
< identifier, Hash >
< operator, * >
< identifier, iter >
< operator, = >
< identifier, pre >
< operator, -> >
< identifier, next >
< operator, ; >
< keyword, for >
< operator, ( >
< operator, ; >
< identifier, iter >
< operator, ; >
< identifier, iter >
< operator, = >
< identifier, iter >
< operator, -> >
< identifier, next >
< operator, , >
< identifier, pre >
< operator, = >
< identifier, pre >
< operator, -> >
< identifier, next >
< operator, ) >
< keyword, if >
< operator, ( >
< identifier, iter >
< operator, -> >
< identifier, node >
< operator, == >
< identifier, cache >
< operator, -> >
< identifier, tail >
< operator, ) >
< keyword, break >
< operator, ; >
< identifier, pre >
< operator, -> >
< identifier, next >
< operator, = >
< identifier, iter >
< operator, -> >
< identifier, next >
< operator, ; >
< identifier, free >
< operator, ( >
< identifier, iter >
< operator, ) >
< operator, ; >
< identifier, DeleteNode >
< operator, ( >
< identifier, cache >
< operator, , >
< identifier, cache >
< operator, -> >
< identifier, tail >
< operator, ) >
< operator, ; >
< operator, } >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, node >
< operator, = >
< operator, ( >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< operator, ) >
< identifier, malloc >
< operator, ( >
< keyword, sizeof >
< operator, ( >
< keyword, struct >
< identifier, CacheNode >
< operator, ) >
< operator, ) >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, node >
< operator, ) >
< operator, { >
< keyword, if >
< operator, ( >
< identifier, cache >
< operator, -> >
< identifier, cached >
< operator, == >
< integer, 0 >
< operator, ) >
< identifier, cache >
< operator, -> >
< identifier, tail >
< operator, = >
< identifier, node >
< operator, ; >
< identifier, strcpy >
< operator, ( >
< identifier, node >
< operator, -> >
< identifier, key >
< operator, , >
< identifier, domain >
< operator, ) >
< operator, ; >
< identifier, node >
< operator, -> >
< identifier, value >
< operator, = >
< operator, ( >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< operator, ) >
< identifier, malloc >
< operator, ( >
< keyword, sizeof >
< operator, ( >
< keyword, struct >
< identifier, ipValue >
< operator, ) >
< operator, ) >
< operator, ; >
< identifier, node >
< operator, -> >
< identifier, value >
< operator, -> >
< identifier, nextval >
< operator, = >
< identifier, NULL >
< operator, ; >
< identifier, copyValue >
< operator, ( >
< identifier, node >
< operator, -> >
< identifier, value >
< operator, , >
< identifier, ipval >
< operator, ) >
< operator, ; >
< identifier, node >
< operator, -> >
< identifier, prev >
< operator, = >
< identifier, cache >
< operator, -> >
< identifier, head >
< operator, ; >
< identifier, node >
< operator, -> >
< identifier, next >
< operator, = >
< identifier, cache >
< operator, -> >
< identifier, head >
< operator, -> >
< identifier, next >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, node >
< operator, -> >
< identifier, next >
< operator, ) >
< identifier, node >
< operator, -> >
< identifier, next >
< operator, -> >
< identifier, prev >
< operator, = >
< identifier, node >
< operator, ; >
< identifier, cache >
< operator, -> >
< identifier, head >
< operator, -> >
< identifier, next >
< operator, = >
< identifier, node >
< operator, ; >
< identifier, cache >
< operator, -> >
< identifier, cached >
< operator, ++ >
< operator, ; >
< operator, } >
< keyword, return >
< identifier, node >
< operator, ; >
< operator, } >
< keyword, struct >
< identifier, Hash >
< operator, * >
< identifier, CheckDomainExist >
< operator, ( >
< identifier, Cache >
< operator, * >
< identifier, cache >
< operator, , >
< keyword, char >
< operator, * >
< identifier, domain >
< operator, ) >
< operator, { >
< keyword, unsigned >
< identifier, index >
< operator, = >
< identifier, hash >
< operator, ( >
< identifier, cache >
< operator, , >
< identifier, domain >
< operator, ) >
< operator, ; >
< keyword, struct >
< identifier, Hash >
< operator, * >
< identifier, iter >
< operator, = >
< operator, ( >
< identifier, cache >
< operator, -> >
< identifier, table >
< operator, ) >
< operator, [ >
< identifier, index >
< operator, ] >
< operator, . >
< identifier, next >
< operator, ; >
< keyword, for >
< operator, ( >
< operator, ; >
< identifier, iter >
< operator, ; >
< identifier, iter >
< operator, = >
< identifier, iter >
< operator, -> >
< identifier, next >
< operator, ) >
< operator, { >
< keyword, if >
< operator, ( >
< identifier, strcmp >
< operator, ( >
< identifier, domain >
< operator, , >
< identifier, iter >
< operator, -> >
< identifier, node >
< operator, -> >
< identifier, key >
< operator, ) >
< operator, == >
< integer, 0 >
< operator, ) >
< operator, { >
< keyword, return >
< identifier, iter >
< operator, ; >
< operator, } >
< operator, } >
< keyword, return >
< identifier, NULL >
< operator, ; >
< operator, } >
< keyword, void >
< identifier, CacheSet >
< operator, ( >
< identifier, Cache >
< operator, * >
< identifier, cache >
< operator, , >
< keyword, char >
< operator, * >
< identifier, domain >
< operator, , >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, ipval >
< operator, ) >
< operator, { >
< keyword, if >
< operator, ( >
< identifier, CheckDomainExist >
< operator, ( >
< identifier, cache >
< operator, , >
< identifier, domain >
< operator, ) >
< operator, ) >
< keyword, return >
< operator, ; >
< keyword, unsigned >
< identifier, index >
< operator, = >
< identifier, hash >
< operator, ( >
< identifier, cache >
< operator, , >
< identifier, domain >
< operator, ) >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, debugLevel >
< operator, == >
< integer, 2 >
< operator, ) >
< identifier, printf >
< operator, ( >
< string literal, %s hash successful, value=%d
 >
< operator, , >
< identifier, domain >
< operator, , >
< identifier, index >
< operator, ) >
< operator, ; >
< keyword, struct >
< identifier, Hash >
< operator, * >
< identifier, HashPtr >
< operator, = >
< operator, & >
< operator, ( >
< identifier, cache >
< operator, -> >
< identifier, table >
< operator, ) >
< operator, [ >
< identifier, index >
< operator, ] >
< operator, , >
< operator, * >
< identifier, curPtr >
< operator, ; >
< identifier, curPtr >
< operator, = >
< operator, ( >
< keyword, struct >
< identifier, Hash >
< operator, * >
< operator, ) >
< identifier, malloc >
< operator, ( >
< keyword, sizeof >
< operator, ( >
< keyword, struct >
< identifier, Hash >
< operator, ) >
< operator, ) >
< operator, ; >
< keyword, if >
< operator, ( >
< operator, ! >
< identifier, curPtr >
< operator, ) >
< operator, { >
< identifier, printf >
< operator, ( >
< string literal, Cannot allocate memory!
 >
< operator, ) >
< operator, ; >
< keyword, return >
< operator, ; >
< operator, } >
< identifier, curPtr >
< operator, -> >
< identifier, node >
< operator, = >
< identifier, CreateNode >
< operator, ( >
< identifier, cache >
< operator, , >
< identifier, domain >
< operator, , >
< identifier, ipval >
< operator, ) >
< operator, ; >
< identifier, curPtr >
< operator, -> >
< identifier, next >
< operator, = >
< identifier, NULL >
< operator, ; >
< keyword, while >
< operator, ( >
< identifier, HashPtr >
< operator, -> >
< identifier, next >
< operator, ) >
< identifier, HashPtr >
< operator, = >
< identifier, HashPtr >
< operator, -> >
< identifier, next >
< operator, ; >
< identifier, HashPtr >
< operator, -> >
< identifier, next >
< operator, = >
< identifier, curPtr >
< operator, ; >
< operator, } >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, PushFront >
< operator, ( >
< identifier, Cache >
< operator, * >
< identifier, cache >
< operator, , >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, node >
< operator, ) >
< operator, { >
< keyword, char >
< identifier, dom >
< operator, [ >
< integer, 50 >
< operator, ] >
< operator, ; >
< identifier, strcpy >
< operator, ( >
< identifier, dom >
< operator, , >
< identifier, node >
< operator, -> >
< identifier, key >
< operator, ) >
< operator, ; >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, value >
< operator, = >
< operator, ( >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< operator, ) >
< identifier, malloc >
< operator, ( >
< keyword, sizeof >
< operator, ( >
< keyword, struct >
< identifier, ipValue >
< operator, ) >
< operator, ) >
< operator, ; >
< identifier, value >
< operator, -> >
< identifier, nextval >
< operator, = >
< identifier, NULL >
< operator, ; >
< identifier, copyValue >
< operator, ( >
< identifier, value >
< operator, , >
< identifier, node >
< operator, -> >
< identifier, value >
< operator, ) >
< operator, ; >
< identifier, DeleteNode >
< operator, ( >
< identifier, cache >
< operator, , >
< identifier, node >
< operator, ) >
< operator, ; >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, res >
< operator, = >
< identifier, CreateNode >
< operator, ( >
< identifier, cache >
< operator, , >
< identifier, dom >
< operator, , >
< identifier, value >
< operator, ) >
< operator, ; >
< identifier, freeValue >
< operator, ( >
< identifier, value >
< operator, ) >
< operator, ; >
< keyword, return >
< identifier, res >
< operator, ; >
< operator, } >
< keyword, int >
< identifier, CacheGet >
< operator, ( >
< identifier, Cache >
< operator, * >
< identifier, cache >
< operator, , >
< keyword, char >
< operator, * >
< identifier, domain >
< operator, , >
< keyword, struct >
< identifier, ipValue >
< operator, * >
< identifier, ipval >
< operator, ) >
< operator, { >
< keyword, int >
< identifier, found >
< operator, = >
< integer, 0 >
< operator, ; >
< keyword, struct >
< identifier, Hash >
< operator, * >
< identifier, iter >
< operator, = >
< identifier, CheckDomainExist >
< operator, ( >
< identifier, cache >
< operator, , >
< identifier, domain >
< operator, ) >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, iter >
< operator, ) >
< operator, { >
< identifier, iter >
< operator, -> >
< identifier, node >
< operator, = >
< identifier, PushFront >
< operator, ( >
< identifier, cache >
< operator, , >
< identifier, iter >
< operator, -> >
< identifier, node >
< operator, ) >
< operator, ; >
< identifier, copyValue >
< operator, ( >
< identifier, ipval >
< operator, , >
< identifier, iter >
< operator, -> >
< identifier, node >
< operator, -> >
< identifier, value >
< operator, ) >
< operator, ; >
< identifier, found >
< operator, = >
< integer, 1 >
< operator, ; >
< operator, } >
< keyword, return >
< identifier, found >
< operator, ; >
< operator, } >
< keyword, void >
< identifier, print >
< operator, ( >
< identifier, Cache >
< operator, * >
< identifier, cache >
< operator, ) >
< operator, { >
< identifier, printf >
< operator, ( >
< string literal, 
****************
 >
< operator, ) >
< operator, ; >
< identifier, printf >
< operator, ( >
< string literal, CACHED NUMBER: %d
 >
< operator, , >
< identifier, cache >
< operator, -> >
< identifier, cached >
< operator, ) >
< operator, ; >
< keyword, for >
< operator, ( >
< keyword, struct >
< identifier, CacheNode >
< operator, * >
< identifier, cur >
< operator, = >
< identifier, cache >
< operator, -> >
< identifier, head >
< operator, -> >
< identifier, next >
< operator, ; >
< identifier, cur >
< operator, ; >
< identifier, cur >
< operator, = >
< identifier, cur >
< operator, -> >
< identifier, next >
< operator, ) >
< operator, { >
< identifier, printf >
< operator, ( >
< string literal, PTR = %p
 >
< operator, , >
< identifier, cur >
< operator, ) >
< operator, ; >
< identifier, printf >
< operator, ( >
< string literal, %s:
 >
< operator, , >
< identifier, cur >
< operator, -> >
< identifier, key >
< operator, ) >
< operator, ; >
< identifier, printValue >
< operator, ( >
< identifier, cur >
< operator, -> >
< identifier, value >
< operator, ) >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, cur >
< operator, -> >
< identifier, prev >
< operator, && >
< identifier, cur >
< operator, -> >
< identifier, prev >
< operator, != >
< identifier, cache >
< operator, -> >
< identifier, head >
< operator, ) >
< identifier, printf >
< operator, ( >
< string literal, , prev is: %s
 >
< operator, , >
< identifier, cur >
< operator, -> >
< identifier, prev >
< operator, -> >
< identifier, key >
< operator, ) >
< operator, ; >
< keyword, else >
< keyword, if >
< operator, ( >
< identifier, cur >
< operator, -> >
< identifier, prev >
< operator, && >
< identifier, cur >
< operator, -> >
< identifier, prev >
< operator, == >
< identifier, cache >
< operator, -> >
< identifier, head >
< operator, ) >
< identifier, printf >
< operator, ( >
< string literal, , prev is head
 >
< operator, ) >
< operator, ; >
< keyword, else >
< identifier, printf >
< operator, ( >
< string literal, , prev is NULL!
 >
< operator, ) >
< operator, ; >
< operator, } >
< identifier, printf >
< operator, ( >
< string literal, -------now checking hash table------
 >
< operator, ) >
< operator, ; >
< keyword, for >
< operator, ( >
< keyword, int >
< identifier, i >
< operator, = >
< integer, 0 >
< operator, ; >
< identifier, i >
< operator, < >
< identifier, cache >
< operator, -> >
< identifier, capacity >
< operator, ; >
< operator, ++ >
< identifier, i >
< operator, ) >
< operator, { >
< keyword, if >
< operator, ( >
< operator, ( >
< identifier, cache >
< operator, -> >
< identifier, table >
< operator, ) >
< operator, [ >
< identifier, i >
< operator, ] >
< operator, . >
< identifier, next >
< operator, ) >
< operator, { >
< keyword, for >
< operator, ( >
< keyword, struct >
< identifier, Hash >
< operator, * >
< identifier, cur >
< operator, = >
< operator, ( >
< identifier, cache >
< operator, -> >
< identifier, table >
< operator, ) >
< operator, [ >
< identifier, i >
< operator, ] >
< operator, . >
< identifier, next >
< operator, ; >
< identifier, cur >
< operator, ; >
< identifier, cur >
< operator, = >
< identifier, cur >
< operator, -> >
< identifier, next >
< operator, ) >
< operator, { >
< identifier, printf >
< operator, ( >
< string literal, i = %d, content is %s, %p
 >
< operator, , >
< identifier, i >
< operator, , >
< identifier, cur >
< operator, -> >
< identifier, node >
< operator, -> >
< identifier, key >
< operator, , >
< identifier, cur >
< operator, ) >
< operator, ; >
< operator, } >
< operator, } >
< operator, } >
< identifier, printf >
< operator, ( >
< string literal, *****************

 >
< operator, ) >
< operator, ; >
< operator, } >
