< keyword, long >
< identifier, v >
< operator, ; >
< keyword, long >
< identifier, fib >
< operator, ( >
< keyword, int >
< identifier, n >
< operator, ) >
< operator, { >
< identifier, assert >
< operator, ( >
< identifier, n >
< operator, >= >
< integer, 0 >
< operator, ) >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, n >
< operator, == >
< integer, 0 >
< operator, ) >
< keyword, return >
< integer, 0 >
< operator, ; >
< keyword, if >
< operator, ( >
< identifier, n >
< operator, == >
< integer, 1 >
< operator, ) >
< keyword, return >
< integer, 1 >
< operator, ; >
< keyword, int >
< identifier, a >
< operator, = >
< integer, 0 >
< operator, , >
< identifier, b >
< operator, = >
< integer, 1 >
< operator, , >
< identifier, f >
< operator, ; >
< keyword, for >
< operator, ( >
< keyword, int >
< identifier, i >
< operator, = >
< integer, 2 >
< operator, ; >
< identifier, i >
< operator, <= >
< identifier, n >
< operator, ; >
< operator, ++ >
< identifier, i >
< operator, ) >
< operator, { >
< identifier, f >
< operator, = >
< identifier, a >
< operator, + >
< identifier, b >
< operator, ; >
< identifier, a >
< operator, = >
< identifier, b >
< operator, ; >
< identifier, b >
< operator, = >
< identifier, f >
< operator, ; >
< operator, } >
< keyword, return >
< identifier, f >
< operator, ; >
< operator, } >
< keyword, int >
< identifier, main >
< operator, ( >
< keyword, int >
< identifier, argc >
< operator, , >
< keyword, char >
< operator, * >
< identifier, argv >
< operator, [ >
< operator, ] >
< operator, ) >
< operator, { >
< keyword, int >
< identifier, result >
< operator, = >
< integer, 0 >
< operator, ; >
< keyword, for >
< operator, ( >
< keyword, int >
< identifier, i >
< operator, = >
< integer, 2 >
< operator, ; >
< identifier, i >
< operator, < >
< integer, 100 >
< operator, ; >
< operator, ++ >
< identifier, i >
< operator, ) >
< operator, { >
< keyword, int >
< identifier, flag >
< operator, = >
< integer, 1 >
< operator, ; >
< keyword, for >
< operator, ( >
< keyword, int >
< identifier, j >
< operator, = >
< integer, 2 >
< operator, ; >
< identifier, j >
< operator, * >
< identifier, j >
< operator, <= >
< identifier, i >
< operator, ; >
< operator, ++ >
< identifier, j >
< operator, ) >
< keyword, if >
< operator, ( >
< identifier, i >
< operator, % >
< identifier, j >
< operator, == >
< integer, 0 >
< operator, ) >
< operator, { >
< identifier, flag >
< operator, = >
< integer, 0 >
< operator, ; >
< keyword, break >
< operator, ; >
< operator, } >
< keyword, if >
< operator, ( >
< identifier, flag >
< operator, ) >
< identifier, result >
< operator, += >
< identifier, fib >
< operator, ( >
< identifier, i >
< operator, ) >
< operator, ; >
< operator, } >
< identifier, result >
< operator, = >
< operator, ( >
< operator, ( >
< identifier, result >
< operator, << >
< integer, 3 >
< operator, ) >
< operator, ^ >
< integer, 1061109567 >
< operator, ) >
< operator, % >
< integer, 998244353 >
< operator, ; >
< keyword, double >
< identifier, a >
< operator, = >
< float, 289.129 >
< operator, * >
< float, 0.097 >
< operator, ; >
< keyword, char >
< operator, * >
< identifier, s >
< operator, = >
< string literal, this is a string with escape char like , 	,  >
< operator, ; >
< keyword, char >
< operator, * >
< identifier, invalid >
< operator, = >
< string literal, invalid escape char is ÿ >
< operator, ; >
< keyword, char >
< identifier, temp >
< operator, = >
< character literal, a >
< operator, ; >
< keyword, return >
< integer, 1 >
< operator, ; >
< operator, } >
